##########################################################################################################
#Distribute Books(codevita 2019)
##########################################################################################################

For enhancing the book reading, school distributed story books to students as part of the Children’s day celebrations.

To increase the reading habit, the class teacher decided to exchange the books every weeks so that everyone will have a different book to read. She wants to know how many possible exchanges are possible.

If they have 4 books and students, the possible exchanges are 9. Bi is the book of i-th student and after the exchange he should get a different book, other than Bi.

B1 B2 B3 B4 - first state, before exchange of the books
B2 B1 B4 B3
B2 B3 B4 B1
B2 B4 B1 B3
B3 B1 B4 B2
B3 B4 B1 B2
B3 B4 B2 B1
B4 B1 B2 B3
B4 B3 B1 B2
B4 B3 B2 B1
Find the number of possible exchanges, if the books are exchanged so that every student will receive a different book.

Constraints
1<= N <= 1000000

Input Format
Input contains one line with N, indicates the number of books and number of students.

Output
Output the answer modulo 1000000007.

Test Case Explanation
Example 1 Input

4

Output
9

################################################################################################################
#[CodeVita 2019] Digit Pairs
################################################################################################################

Given N three-digit numbers, your task is to find bit score of all N numbers and then print the number of pairs possible based on these calculated bit score.

Rule for calculating bit score from three digit number

From the 3-digit number:

extract largest digit and multiply by 11 then
extract smallest digit multiply by 7 then
add both the result for getting bit pairs.
Note: Bit score should be of 2-digits, if above results in a 3-digit bit score, simply ignore most significant digit.

Consider following examples:

Say, number is 286

Largest digit is 8 and smallest digit is 2
So, 8*11+2*7 =102 so ignore most significant bit , So bit score = 02.
Say, Number is 123

Largest digit is 3 and smallest digit is 1
So, 3*11+7*1=40, so bit score is 40.
Rules for making pairs from above calculated bit scores

Condition for making pairs are

Both bit scores should be in either odd position or even position to be eligible to form a pair.
Pairs can be only made if most significant digit are same and at most two pair can be made for a given significant digit.
Constraints
N<=500

Input Format

First line contains T the number of test cases. For each test case you have:
1 line contains an integer N, denoting the count of numbers
Next line contains N 3-digit integers delimited by space
Output

One integer value denoting the number of bit pairs.
Example Input
3
8 
234 567 321 345 123 110 767 111
7 
279 420 427 437 566 572 921
12 
154 252 320 586 590 613 743 814 824 868 902 936
Output
3
2
3
Explanation
First case
After getting the most and least significant digits of the numbers and applying the formula given in Rule 1 we get the bit scores of the numbers as:

58 12 40 76 40 11 19 18

No. of pair possible are 3:

40 appears twice at odd-indices 3 and 5 respectively. Hence, this is one pair.
12, 11, 18 are at even-indices. Hence, two pairs are possible from these three-bit scores.
Hence total pairs possible is 3

Second case
We get the bitscores as: 13 44 91 98 01 91 06

We can get the following pairs: 98 and 91, because they are at 4th and 6th position respectively

We can also get 01 and 06

Hence 2 pairs completely

Third Case
We get the bitscores as 62 69 33 23 99 73 98 95 02 30 99 20. In this we can form the following pairs:

23, 20, and 2 pairs from 99, 98, 99



#####################################################################################################################
#Codevita(2016) Minimum Product Array
#####################################################################################################################

The task is to find the minimum sum of Products of two arrays of the same size, given that k modifications are allowed on the first array. In each modification, one array element of the first array can either be increased or decreased by 2.

Note- the product sum is Summation (A[i]*B[i]) for all i from 1 to n where n is the size of both arrays
Input Format: 
First line of the input contains n and k delimited by whitespace
Second line contains the Array A (modifiable array) with its values delimited by spaces
Third line contains the Array B (non-modifiable array) with its values delimited by spaces

Output Format:

Output the minimum sum of products of the two arrays
Constraints:
1 ≤ N ≤ 10^5
0 ≤ |A[i]|, |B[i]| ≤ 10^5
0 ≤ K ≤ 10^9



Sample Input and Output


SNo.	Input	Output
1	
3 5
1 2 -3
-2 3 -5	
-31
2	
5 3
2 3 4 5 4
3 4 2 3 2	
25

Explanation for sample 1:

Here total numbers are 3 and total modifications allowed are 5. So we modified A[2], which is -3 and increased it by 10 (as 5 modifications are allowed). Now final sum will be
(1 * -2) + (2 * 3) + (7 * -5)
-2 + 6 - 35
-31

-31 is our final answer.

Explanation for sample 2:

Here total numbers are 5 and total modifications allowed are 3. So we modified A[1], which is 3 and decreased it by 6 (as 3 modifications are allowed).
Now final sum will be
(2 * 3) + (-3 * 4) + (4 * 2) + (5 * 3) + (4 * 2)
6 - 12 + 8 + 15 + 8
25
